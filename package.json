{
    "name": "azure-video-analyzer",
    "displayName": "Azure Video Analyzer",
    "description": "%extensionDescription%",
    "version": "0.1.4",
    "publisher": "ms-azuretools",
    "license": "SEE LICENSE IN LICENSE",
    "homepage": "https://github.com/Azure/video-analyzer-vscode-extension",
    "bugs": {
        "url": "https://github.com/Azure/video-analyzer-vscode-extension/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/Azure/video-analyzer-vscode-extension"
    },
    "icon": "lva-icon.png",
    "engines": {
        "vscode": "^1.38.0"
    },
    "categories": [
        "Azure",
        "Extension Packs"
    ],
    "activationEvents": [
        "onWebviewPanel:lvaTopologyEditor",
        "onView:moduleExplorer"
    ],
    "keywords": [
        "azure video analyzer,video analyzer,AVA,azureVideo,videoAnalyzer"
    ],
    "main": "./dist/extension",
    "contributes": {
        "commands": [
            {
                "command": "moduleExplorer.refresh",
                "title": "%refresh%",
                "icon": "$(refresh)"
            },
            {
                "command": "moduleExplorer.resetConnection",
                "title": "%deleteConnectionToHub%",
                "icon": "$(trashcan)"
            },
            {
                "command": "moduleExplorer.createGraph",
                "title": "%createGraphButton%",
                "icon": "$(add)"
            },
            {
                "command": "moduleExplorer.editGraph",
                "title": "%editGraphButton%"
            },
            {
                "command": "moduleExplorer.showGraphJson",
                "title": "%showGraphJson%"
            },
            {
                "command": "moduleExplorer.deleteGraph",
                "title": "%deleteGraphButton%",
                "enablement": "view == moduleExplorer && viewItem == graphItemContext"
            },
            {
                "command": "moduleExplorer.createInstance",
                "title": "%createGraphInstanceButton%",
                "icon": "$(add)"
            },
            {
                "command": "moduleExplorer.activateInstance",
                "title": "%activateInstanceButton%",
                "enablement": "view == moduleExplorer && viewItem == InstanceItemContextInactive"
            },
            {
                "command": "moduleExplorer.deactivateInstance",
                "title": "%deactivateInstanceButton%",
                "enablement": "view == moduleExplorer && viewItem == InstanceItemContextActive"
            },
            {
                "command": "moduleExplorer.editInstance",
                "title": "%editInstanceButton%",
                "enablement": "view == moduleExplorer && viewItem == InstanceItemContextInactive"
            },
            {
                "command": "moduleExplorer.deleteInstance",
                "title": "%deleteInstanceButton%",
                "enablement": "view == moduleExplorer && viewItem == InstanceItemContextInactive"
            },
            {
                "command": "moduleExplorer.showGraphInstanceJson",
                "title": "%showGraphInstanceJson%"
            },
            {
                "command": "moduleExplorer.topology.create",
                "title": "%topology.create%",
                "icon": "$(add)"
            },
            {
                "command": "moduleExplorer.topology.edit",
                "title": "%topology.edit%"
            },
            {
                "command": "moduleExplorer.topology.delete",
                "title": "%topology.delete%",
                "enablement": "view == moduleExplorer && viewItem == topologyItemContext"
            },
            {
                "command": "moduleExplorer.topology.showJson",
                "title": "%topology.showJson%"
            },
            {
                "command": "moduleExplorer.livePipeline.create",
                "title": "%livePipeline.create%",
                "icon": "$(add)"
            },
            {
                "command": "moduleExplorer.livePipeline.activate",
                "title": "%livePipeline.activate%",
                "enablement": "view == moduleExplorer && viewItem == livePipelineItemContextInactive"
            },
            {
                "command": "moduleExplorer.livePipeline.deactivate",
                "title": "%livePipeline.deactivate%",
                "enablement": "view == moduleExplorer && viewItem == livePipelineItemContextActive"
            },
            {
                "command": "moduleExplorer.livePipeline.edit",
                "title": "%livePipeline.edit%",
                "enablement": "view == moduleExplorer && viewItem == livePipelineItemContextInactive"
            },
            {
                "command": "moduleExplorer.livePipeline.delete",
                "title": "%livePipeline.delete%",
                "enablement": "view == moduleExplorer && viewItem == livePipelineItemContextInactive"
            },
            {
                "command": "moduleExplorer.livePipeline.showJson",
                "title": "%livePipeline.showJson%"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "module-explorer",
                    "title": "%video-analyzer.views.moduleExplorer.name%",
                    "icon": "resources/images/LVA-mono.svg"
                }
            ]
        },
        "views": {
            "module-explorer": [
                {
                    "id": "moduleExplorer",
                    "name": "%video-analyzer.views.moduleExplorer.name%",
                    "icon": "resources/images/LVA-mono.svg"
                }
            ]
        },
        "menus": {
            "view/title": [
                {
                    "command": "moduleExplorer.refresh",
                    "when": "view == moduleExplorer",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "moduleExplorer.resetConnection",
                    "when": "view == moduleExplorer && viewItem == hubItemContext",
                    "group": "inline"
                },
                {
                    "command": "moduleExplorer.resetConnection",
                    "when": "view == moduleExplorer && viewItem == hubItemContext"
                },
                {
                    "command": "moduleExplorer.createInstance",
                    "when": "view == moduleExplorer && viewItem =~ /^graphItemContext.*$/",
                    "group": "inline"
                },
                {
                    "command": "moduleExplorer.createInstance",
                    "when": "view == moduleExplorer && viewItem =~ /^graphItemContext.*$/",
                    "group": "1_groupCommands@0"
                },
                {
                    "command": "moduleExplorer.editGraph",
                    "when": "view == moduleExplorer && viewItem =~ /^graphItemContext.*$/",
                    "group": "2_groupCommands@0"
                },
                {
                    "command": "moduleExplorer.deleteGraph",
                    "when": "view == moduleExplorer && viewItem =~ /^graphItemContext.*$/",
                    "group": "2_groupCommands@1"
                },
                {
                    "command": "moduleExplorer.showGraphJson",
                    "when": "view == moduleExplorer && viewItem =~ /^graphItemContext.*$/",
                    "group": "3_groupCommands@0"
                },
                {
                    "command": "moduleExplorer.activateInstance",
                    "when": "view == moduleExplorer && viewItem =~ /^InstanceItemContext.*$/",
                    "group": "1_instanceCommands@0"
                },
                {
                    "command": "moduleExplorer.deactivateInstance",
                    "when": "view == moduleExplorer && viewItem =~ /^InstanceItemContext.*$/",
                    "group": "1_instanceCommands@1"
                },
                {
                    "command": "moduleExplorer.editInstance",
                    "when": "view == moduleExplorer && viewItem =~ /^InstanceItemContext.*$/",
                    "group": "2_instanceCommands@2"
                },
                {
                    "command": "moduleExplorer.deleteInstance",
                    "when": "view == moduleExplorer && viewItem =~ /^InstanceItemContext.*$/",
                    "group": "2_instanceCommands@3"
                },
                {
                    "command": "moduleExplorer.showGraphInstanceJson",
                    "when": "view == moduleExplorer && viewItem =~ /^InstanceItemContext.*$/",
                    "group": "3_instanceCommands@0"
                },
                {
                    "command": "moduleExplorer.createGraph",
                    "when": "view == moduleExplorer && viewItem == graphListContext",
                    "group": "inline"
                },
                {
                    "command": "moduleExplorer.createGraph",
                    "when": "view == moduleExplorer && viewItem == graphListContext"
                },
                {
                    "command": "moduleExplorer.topology.create",
                    "when": "view == moduleExplorer && viewItem == topologyListContext",
                    "group": "inline"
                },
                {
                    "command": "moduleExplorer.topology.create",
                    "when": "view == moduleExplorer && viewItem == topologyListContext"
                },
                {
                    "command": "moduleExplorer.topology.edit",
                    "when": "view == moduleExplorer && viewItem =~ /^topologyItemContext.*$/",
                    "group": "2_groupCommands@0"
                },
                {
                    "command": "moduleExplorer.topology.delete",
                    "when": "view == moduleExplorer && viewItem =~ /^topologyItemContext.*$/",
                    "group": "2_groupCommands@1"
                },
                {
                    "command": "moduleExplorer.topology.showJson",
                    "when": "view == moduleExplorer && viewItem =~ /^topologyItemContext.*$/",
                    "group": "3_groupCommands@0"
                },
                {
                    "command": "moduleExplorer.livePipeline.create",
                    "when": "view == moduleExplorer && viewItem =~ /^topologyItemContext.*$/",
                    "group": "inline"
                },
                {
                    "command": "moduleExplorer.livePipeline.create",
                    "when": "view == moduleExplorer && viewItem =~ /^topologyItemContext.*$/",
                    "group": "1_groupCommands@0"
                },
                {
                    "command": "moduleExplorer.livePipeline.activate",
                    "when": "view == moduleExplorer && viewItem =~ /^livePipelineItemContext.*$/",
                    "group": "1_instanceCommands@0"
                },
                {
                    "command": "moduleExplorer.livePipeline.deactivate",
                    "when": "view == moduleExplorer && viewItem =~ /^livePipelineItemContext.*$/",
                    "group": "1_instanceCommands@1"
                },
                {
                    "command": "moduleExplorer.livePipeline.edit",
                    "when": "view == moduleExplorer && viewItem =~ /^livePipelineItemContext.*$/",
                    "group": "2_instanceCommands@2"
                },
                {
                    "command": "moduleExplorer.livePipeline.delete",
                    "when": "view == moduleExplorer && viewItem =~ /^livePipelineItemContext.*$/",
                    "group": "2_instanceCommands@3"
                },
                {
                    "command": "moduleExplorer.livePipeline.showJson",
                    "when": "view == moduleExplorer && viewItem =~ /^livePipelineItemContext.*$/",
                    "group": "3_instanceCommands@0"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "moduleExplorer",
                "contents": "No Azure IoT Hub connection string has been provided.\n[Enter Connection String](command:moduleExplorer.setConnectionString)"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "%extensionConfigurationTitle%",
            "properties": {
                "azure-video-analyzer.treeViewAutoRefreshIntervalInSeconds": {
                    "type": "number",
                    "default": 60,
                    "description": "%treeViewAutoRefreshIntervalInSecondsDescription%"
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "react-app-rewired build && webpack --mode production --config src/Extension/webpack.config.js",
        "webpack-dev": "rimraf dist && webpack --mode development --watch --config src/Extension/webpack.config.js",
        "compile": "npm run compile-react && npm run compile-ext",
        "compile-react": "react-app-rewired build",
        "eject-react": "react-app-rewired eject",
        "compile-ext": "rimraf dist && webpack --mode development --config src/Extension/webpack.config.js",
        "dev-ext": "tsc -p src/Extension/tsconfig.json",
        "dev": "set PORT=3009 && react-app-rewired start",
        "lint": "eslint . --ext .ts,.tsx",
        "format": "prettier --write \"./**/*.{js,jsx,json,ts,tsx}\" \"!./build\"",
        "create-definitions": "tsc -p ./src/Tools/DefinitionGenerator/tsconfig.json && node ./DefinitionGenerator/Tools/DefinitionGenerator/entry.js",
        "create-definitions-debug": "node ./DefinitionGenerator/Tools/DefinitionGenerator/entry.js",
        "refreshVSToken": "vsts-npm-auth -config .npmrc"
    },
    "dependencies": {
        "@fluentui/react": "^7.153.0",
        "@uifabric/icons": "^7.5.17",
        "@uifabric/react-hooks": "^7.13.9",
        "@vienna/react-dag-editor": "^2.0.0-rc.58",
        "azure-iothub": "1.12.4",
        "compare-versions": "^3.6.0",
        "dagre": "^0.8.5",
        "lodash": "^4.17.21",
        "react": "^16.13.1",
        "react-accessible-accordion": "^3.3.3",
        "react-accessible-tree": "^1.0.3",
        "react-dom": "^16.13.1",
        "uuid": "^8.3.0"
    },
    "devDependencies": {
        "@types/dagre": "^0.7.44",
        "@types/keytar": "^4.4.2",
        "@types/lodash": "^4.14.155",
        "@types/node": "^12.12.0",
        "@types/react": "^16.9.36",
        "@types/react-dom": "^16.9.8",
        "@types/uuid": "^8.0.0",
        "@types/vscode": "^1.38.0",
        "@typescript-eslint/eslint-plugin": "4.0.0",
        "@typescript-eslint/parser": "^3.0.0",
        "customize-cra": "^1.0.0",
        "eslint": "^7.11.0",
        "eslint-plugin-react-hooks": "^4.0.8",
        "prettier": "^2.0.5",
        "react-app-rewired": "^2.1.6",
        "react-scripts": "^4.0.2",
        "ts-loader": "^8.0.11",
        "typescript": "^3.9.4",
        "vscode": "^1.1.37",
        "webpack": "4.44.2",
        "webpack-cli": "^3.3.12"
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}
